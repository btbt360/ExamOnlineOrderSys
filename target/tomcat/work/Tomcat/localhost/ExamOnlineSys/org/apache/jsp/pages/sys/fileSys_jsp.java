/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2016-12-30 16:28:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages.sys;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class fileSys_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<meta name=\"robots\" content=\"noindex, nofollow\" />\r\n");
      out.write("\r\n");
      out.write("<title>文件管理</title>\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fimport_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("<style type=\"text/css\">body, html, iframe, #ckfinder {margin:0;padding:0;border:0;width:100%;height:1000px;}</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"CKFinderFrameWindow\">\r\n");
      out.write("\t<div id=\"ckfinder\" style=\"margin-top: 3%\"></div>\r\n");
      out.write("\t<!-- block -->\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t//<![CDATA[\r\n");
      out.write("\t(function()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tvar config = {};\r\n");
      out.write("\t\tvar get = CKFinder.tools.getUrlParam;\r\n");
      out.write("\t\tvar getBool = function( v )\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar t = get( v );\r\n");
      out.write("\r\n");
      out.write("\t\t\tif ( t === null )\r\n");
      out.write("\t\t\t\treturn null;\r\n");
      out.write("\r\n");
      out.write("\t\t\treturn t == '0' ? false : true;\r\n");
      out.write("\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\tvar tmp;\r\n");
      out.write("\t\tif ( tmp = get( 'configId' ) )\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar win = window.opener || window;\r\n");
      out.write("\t\t\ttry\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\twhile ( ( !win.CKFinder || !win.CKFinder._.instanceConfig[ tmp ] ) && win != window.top )\r\n");
      out.write("\t\t\t\t\twin = win.parent;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif ( win.CKFinder._.instanceConfig[ tmp ] )\r\n");
      out.write("\t\t\t\t\tconfig = CKFINDER.tools.extend( {}, win.CKFinder._.instanceConfig[ tmp ] );\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tcatch(e) {}\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tif ( tmp = get( 'basePath' ) )\r\n");
      out.write("\t\t\tCKFINDER.basePath = tmp;\r\n");
      out.write("\r\n");
      out.write("\t\tif ( tmp = get( 'startupPath' ) || get( 'start' ) )\r\n");
      out.write("\t\t\tconfig.startupPath = decodeURIComponent( tmp );\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tconfig.id = get( 'id' ) || '';\r\n");
      out.write("\r\n");
      out.write("\t\tif ( ( tmp = getBool( 'rlf' ) ) !== null )\r\n");
      out.write("\t\t\tconfig.rememberLastFolder = tmp;\r\n");
      out.write("\r\n");
      out.write("\t\tif ( ( tmp = getBool( 'dts' ) ) !== null )\r\n");
      out.write("\t\t\tconfig.disableThumbnailSelection = tmp;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif ( ( tmp = getBool( 'sm' ) ) !== null )\r\n");
      out.write("\t\t\tconfig.selectMultiple = tmp;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif ( tmp = get( 'data' ) )\r\n");
      out.write("\t\t\tconfig.selectActionData = tmp;\r\n");
      out.write("\r\n");
      out.write("\t\tif ( tmp = get( 'tdata' ) )\r\n");
      out.write("\t\t\tconfig.selectThumbnailActionData = tmp;\r\n");
      out.write("\r\n");
      out.write("\t\tif ( tmp = get( 'type' ) )\r\n");
      out.write("\t\t\tconfig.resourceType = tmp;\r\n");
      out.write("\r\n");
      out.write("\t\tif ( tmp = get( 'skin' ) )\r\n");
      out.write("\t\t\tconfig.skin = tmp;\r\n");
      out.write("\r\n");
      out.write("\t\tif ( tmp = get( 'langCode' ) )\r\n");
      out.write("\t\t\tconfig.language = tmp;\r\n");
      out.write("\r\n");
      out.write("\t\tif ( typeof( config.selectActionFunction ) == 'undefined' )\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\t// Try to get desired \"File Select\" action from the URL.\r\n");
      out.write("\t\t\tvar action;\r\n");
      out.write("\t\t\tif ( tmp = get( 'CKEditor' ) )\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tif ( tmp.length )\r\n");
      out.write("\t\t\t\t\taction = 'ckeditor';\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif ( !action )\r\n");
      out.write("\t\t\t\taction = get( 'action' );\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar parentWindow = ( window.parent == window ) ? window.opener : window.parent;\r\n");
      out.write("\t\t\tif (!parentWindow) parentWindow = window.parent.document;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif ( tmp = get( 'pwMf' ) )\r\n");
      out.write("\t\t\t\tparentWindow = parentWindow.mainFrame;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tswitch ( action )\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tcase 'js':\r\n");
      out.write("\t\t\t\t\tvar actionFunction = get( 'func' );\r\n");
      out.write("\t\t\t\t\tif ( actionFunction && actionFunction.length > 0 )\r\n");
      out.write("\t\t\t\t\t\tconfig.selectActionFunction = parentWindow[ actionFunction ];\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tactionFunction = get( 'thumbFunc' );\r\n");
      out.write("\t\t\t\t\tif ( actionFunction && actionFunction.length > 0 )\r\n");
      out.write("\t\t\t\t\t\tconfig.selectThumbnailActionFunction = parentWindow[ actionFunction ];\r\n");
      out.write("\t\t\t\t\tbreak ;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tcase 'ckeditor':\r\n");
      out.write("\t\t\t\t\tvar funcNum = get( 'CKEditorFuncNum' );\r\n");
      out.write("\t\t\t\t\tif ( parentWindow['CKEDITOR'] )\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\tconfig.selectActionFunction = function( fileUrl, data )\r\n");
      out.write("\t\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\t\tparentWindow['CKEDITOR'].tools.callFunction( funcNum, fileUrl, data );\r\n");
      out.write("\t\t\t\t\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tconfig.selectThumbnailActionFunction = config.selectActionFunction;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tbreak;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tdefault:\r\n");
      out.write("\t\t\t\t\tif ( parentWindow && parentWindow['FCK'] && parentWindow['SetUrl'] )\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\taction = 'fckeditor' ;\r\n");
      out.write("\t\t\t\t\t\tconfig.selectActionFunction = parentWindow['SetUrl'];\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif ( !config.disableThumbnailSelection )\r\n");
      out.write("\t\t\t\t\t\t\tconfig.selectThumbnailActionFunction = parentWindow['SetUrl'];\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\telse\r\n");
      out.write("\t\t\t\t\t\taction = null ;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tconfig.action = action;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar callback = get( 'cb' );\r\n");
      out.write("\t\t\tif ( callback && callback.length > 0 )\r\n");
      out.write("\t\t\t\tconfig.callback = parentWindow[ callback ];\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// Always use 100% width and height when nested using this middle page.\r\n");
      out.write("\t\tconfig.width = config.height = '100%';\r\n");
      out.write("\r\n");
      out.write("\t\tvar ckfinder = new CKFinder( config );\r\n");
      out.write("\t\tckfinder.replace( 'ckfinder', config );\r\n");
      out.write("\t\t\r\n");
      out.write("\t})();\r\n");
      out.write("\t//]]>\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fimport_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:import
    org.apache.taglibs.standard.tag.rt.core.ImportTag _jspx_th_c_005fimport_005f0 = (org.apache.taglibs.standard.tag.rt.core.ImportTag) _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.ImportTag.class);
    _jspx_th_c_005fimport_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fimport_005f0.setParent(null);
    // /pages/sys/fileSys.jsp(12,0) name = url type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fimport_005f0.setUrl("/pages/include/pageNavigationFile.jsp");
    int[] _jspx_push_body_count_c_005fimport_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fimport_005f0 = _jspx_th_c_005fimport_005f0.doStartTag();
      if (_jspx_th_c_005fimport_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fimport_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fimport_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fimport_005f0.doFinally();
      _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.reuse(_jspx_th_c_005fimport_005f0);
    }
    return false;
  }
}
